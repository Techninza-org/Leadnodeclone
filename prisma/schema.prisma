generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum FieldType {
  INPUT
  PHONE
  TAG
  CURRENCY
  IMAGE
  DATE
  DATETIME
  TEXTAREA
  RADIO
  CHECKBOX
  SELECT
  DD
  DD_IMG
}

enum Status {
  NEW
  OPEN
  CLOSED
}

enum BidStatus {
  PENDING
  APPROVED
}

enum CallStatus {
  BUSY
  PENDING
  SUCCESS
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Prospect {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name           String
  email          String
  phone          String
  alternatePhone String?
  rating         Int?
  remark         String

  via                String
  dynamicFieldValues Json?

  isLeadConverted Boolean @default(false)

  callStatus    CallStatus    @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  // leadTransferTo LeadTransferTo[] // May be in future
  nextFollowUpDate String?
  leadMember       ProspectMember[]
  followUps        ProspectFollowUp[]

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  companyDeptId String      @db.ObjectId
  companyDept   CompanyDept @relation(fields: [companyDeptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, phone])
  @@index([companyId])
}

model ProspectFollowUp {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  followUpBy         String
  nextFollowUpDate   String?
  remark             String
  customerResponse   String?
  rating             String?
  dynamicFieldValues Json?

  prospect   Prospect @relation(fields: [prospectId], references: [id])
  prospectId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProspectMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  prospect   Prospect @relation(fields: [prospectId], references: [id])
  prospectId String   @db.ObjectId

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([prospectId, memberId])
}

model Lead {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name           String
  email          String?
  phone          String
  alternatePhone String?
  rating         Int?
  remark         String

  via String // The way through which the lead is tranfer : API or CSV or etc

  status Status @default(OPEN)

  callStatus    CallStatus    @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  submittedForm  SubmittedForm[]
  leadMember     LeadMember[]
  bids           Bid[]
  leadTransferTo LeadTransferTo[]

  followUps          LeadFollowUp[]
  dynamicFieldValues Json?

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  companyDeptId String      @db.ObjectId
  companyDept   CompanyDept @relation(fields: [companyDeptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, phone])
  @@index([companyId])
}

model Client {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name           String
  email          String
  phone          String
  alternatePhone String?
  rating         Int?
  remark         String

  via String // The way through which the lead is tranfer : API or CSV or etc

  status Status @default(OPEN)

  callStatus    CallStatus    @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  followUps          LeadFollowUp[]
  dynamicFieldValues Json?

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  companyDeptId String      @db.ObjectId
  companyDept   CompanyDept @relation(fields: [companyDeptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, phone])
  @@index([companyId])
}

model LeadFollowUp {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  leadId           String  @db.ObjectId
  lead             Lead    @relation(fields: [leadId], references: [id])
  followUpBy       String
  nextFollowUpDate String?
  remark           String
  customerResponse String?
  rating           String?

  dynamicFieldValues Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?  @db.ObjectId
}

model Bid {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  leadId String @db.ObjectId
  lead   Lead   @relation(fields: [leadId], references: [id])

  bidAmount Float
  bidStatus BidStatus @default(PENDING)

  deptId String?      @db.ObjectId
  Dept   CompanyDept? @relation(fields: [deptId], references: [id])

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id])

  description String?

  isApproved Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeadMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  leadId String @db.ObjectId
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, memberId])
}

model LeadTransferTo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  leadId String @db.ObjectId
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  leadData Json?

  transferToId String @db.ObjectId
  transferTo   Member @relation(fields: [transferToId], references: [id], name: "TransferTo")

  transferById String @db.ObjectId
  transferBy   Member @relation(fields: [transferById], references: [id], name: "TransferBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubmittedForm {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  formName String

  leadId String @db.ObjectId
  lead   Lead   @relation(fields: [leadId], references: [id])

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id])

  formValue FormValue[] @relation("FormValueRelation")

  dependentOnFormName String?
  dependentOnValue    FormValue[] @relation("DependentOnValueRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([formName, leadId, memberId])
}

model FormValue {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  formValueId   String?        @db.ObjectId
  submittedForm SubmittedForm? @relation("FormValueRelation", fields: [formValueId], references: [id])

  dependentFormValueId String?        @db.ObjectId
  dependentFormValue   SubmittedForm? @relation("DependentOnValueRelation", fields: [dependentFormValueId], references: [id])

  name      String
  value     Json?
  fieldType FieldType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanyDept {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String
  deptManagerId String

  companyId String  @db.ObjectId
  Company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  companyForms CompanyDeptForm[]
  members      Member[]
  Lead         Lead[]
  Bid          Bid[]
  Prospect     Prospect[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Client    Client[]

  @@unique([companyId])
  @@index([companyId, name])
}

model CompanyDeptFormCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  companyDeptForm CompanyDeptForm[]
  companyId       String            @db.ObjectId
  company         Company           @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, name])
}

model CompanyDeptForm {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  order Int

  companyDeptId String      @db.ObjectId
  companyDept   CompanyDept @relation(fields: [companyDeptId], references: [id])

  dependentOnId String?

  categoryId String                  @db.ObjectId
  category   CompanyDeptFormCategory @relation(fields: [categoryId], references: [id])

  fields CompanyFormField[]

  roleId String? @db.ObjectId
  Role   Role?   @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model CompanyFormFieldOptions {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   label              String
//   value              Json?
//   colorCode          String?
//   CompanyFormField   CompanyFormField? @relation(fields: [companyFormFieldId], references: [id])
//   companyFormFieldId String?           @db.ObjectId
// }

model CompanyFormField {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  fieldType FieldType
  order     Int
  value     Json?

  ddOptionId String?
  imgLimit   Int?

  options Json?

  deptFieldId String          @db.ObjectId
  deptField   CompanyDeptForm @relation(fields: [deptFieldId], references: [id])

  isDisabled Boolean @default(false)
  isRequired Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deptFieldId])
}

model Company {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  rootId String

  companyManagerId String
  name             String
  imgURL           String?
  email            String
  phone            String

  isSubscribed Boolean @default(false)

  Log                     Log[]
  Subscriptions           Subscriptions[]
  Depts                   CompanyDept[]
  Leads                   Lead[]
  Prospect                Prospect[]
  CompanyDeptFormCategory CompanyDeptFormCategory[]
  members                 Member[]                  @relation("CompanyMembers")
  Role                    Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Client    Client[]

  @@index([rootId])
  @@index([companyManagerId])
  @@index([email])
}

model Location {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  locations         Json[]
  day               String
  batteryPercentage String?
  apiHitTime        String?
  networkStrength   String?
  isLocationOff     Boolean @default(true)

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, day])
}

model Role {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  members Member[]

  companyDeptForm CompanyDeptForm[]

  companyId String?  @db.ObjectId
  company   Company? @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  password String  @unique
  name     String
  imgURL   String?
  phone    String
  otp      String?

  otpExpiry DateTime?
  platform  String?

  deptId String?      @db.ObjectId
  Dept   CompanyDept? @relation(fields: [deptId], references: [id], onDelete: Cascade)

  roleId String @db.ObjectId
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  companyId String?  @db.ObjectId
  Company   Company? @relation(fields: [companyId], references: [id], name: "CompanyMembers", onDelete: Cascade)

  submittedForm SubmittedForm[]

  Log            Log[]
  Bid            Bid[]
  LeadMember     LeadMember[]
  Location       Location[]
  ProspectMember ProspectMember[]
  LeadTransferTo LeadTransferTo[] @relation("TransferTo")
  LeadTransferBy LeadTransferTo[] @relation("TransferBy")

  sessionToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phone])
  @@index([deptId])
  @@index([roleId])
  @@index([companyId])
}

// /********ADMIN's MODEL********/

// model Admin {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   email    String  @unique
//   password String
//   imgURL   String?
//   phone    String  @unique

//   otp       String?
//   otpExpiry DateTime?
//   platform  String?
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   @@unique([email, phone])
// }

model AdminDept {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name   String  @unique
  imgURL String?

  adminDeptForm AdminDeptForm[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminDeptForm {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  deptOrder Int

  adminDeptId String?    @db.ObjectId
  AdminDept   AdminDept? @relation(fields: [adminDeptId], references: [id])

  formFields AdminFormField[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminDeptId])
}

model AdminFormFieldptions {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  label            String
  value            Json?
  colorCode        String?
  AdminFormField   AdminFormField? @relation(fields: [adminFormFieldId], references: [id])
  adminFormFieldId String?         @db.ObjectId
}

model AdminFormField {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  fieldType FieldType
  order     Int
  value     Json?

  ddOptionId String?
  imgLimit   Int?

  options AdminFormFieldptions[]

  deptFieldId String        @db.ObjectId
  DeptField   AdminDeptForm @relation(fields: [deptFieldId], references: [id])

  isDisabled Boolean @default(false)
  isRequired Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deptFieldId])
}

// /********PLAN's MODEL********/

model Plan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String  @unique
  description String
  price       Float
  duration    Int
  maxUsers    Int?
  isActive    Boolean @default(true)

  rank Int

  defaultAllowedDeptsIds String[]

  Subscriptions Subscriptions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscriptions {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  companyId String  @db.ObjectId
  Company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  planId String @db.ObjectId
  plan   Plan   @relation(fields: [planId], references: [id])

  allowedDeptsIds String[]

  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

// /***********Utils (Log maintain)**********/

model Log {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  logType     String
  logData     Json
  description String

  userId String @db.ObjectId
  user   Member @relation(fields: [userId], references: [id])

  comapnyId String  @db.ObjectId
  company   Company @relation(fields: [comapnyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
